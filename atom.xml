<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JoyTan&#39;s Blog</title>
  <subtitle>做自己，不将就</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://joytan1209.github.io/"/>
  <updated>2017-06-05T01:44:17.000Z</updated>
  <id>http://joytan1209.github.io/</id>
  
  <author>
    <name>JoyTan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017-开启新的征程</title>
    <link href="http://joytan1209.github.io/2017/02/05/2017-%E5%BC%80%E5%90%AF%E6%96%B0%E7%9A%84%E5%BE%81%E7%A8%8B/"/>
    <id>http://joytan1209.github.io/2017/02/05/2017-开启新的征程/</id>
    <published>2017-02-05T12:52:32.000Z</published>
    <updated>2017-06-05T01:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2017-开启新的征程"><a href="#2017-开启新的征程" class="headerlink" title="2017 开启新的征程"></a>2017 开启新的征程</h2><p>时间飞逝，2017年已经开始了一个多月了。刚刚过完春节，在这里做个简短的总结与新年的规划。</p>
<p>我的2016算起来是工作以来最辛苦的一年了吧！离开了老东家，加入了全民创业的大军。二线城市的互联网创业路走起来还是比较艰难的，两个月的时间，第二次创业团队没有组建起来，以失败告终。经过一个月的反思与观察，选择了一个新的创业方向，也如愿以偿找到了一个比较满意的团队，在9月份开始了互联网金融行业的探索之路。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2017-开启新的征程&quot;&gt;&lt;a href=&quot;#2017-开启新的征程&quot; class=&quot;headerlink&quot; title=&quot;2017 开启新的征程&quot;&gt;&lt;/a&gt;2017 开启新的征程&lt;/h2&gt;&lt;p&gt;时间飞逝，2017年已经开始了一个多月了。刚刚过完春节，在这里做个简
    
    </summary>
    
    
      <category term="杂谈" scheme="http://joytan1209.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Android App 自动登录实现</title>
    <link href="http://joytan1209.github.io/2016/05/05/Android%20APP%20%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95/"/>
    <id>http://joytan1209.github.io/2016/05/05/Android APP 自动登录/</id>
    <published>2016-05-05T06:02:49.000Z</published>
    <updated>2017-06-05T01:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>自动登录应该是比较常见的需求了，绝大多数的APP都有这个功能。所谓自动登录，就是登录之后，在下次重启App后用户仍然可以登录，而不需要重新输入用户名和密码。因为每次都要用户输入用户名/密码登录是很麻烦的事情，当然强迫症除外。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>最常见的做法就是，登录成功后，将用户名、密码保存到本地。重拾是判断本地是否有已保存的用户名、密码，如果有则以本地保存的用户名、密码做模拟登录操作。</p>
<p>最常用的保存用户名、密码方法就是使用SharedPreferences了。这里就不介绍SharedPreferences了。</p>
<p>但是，这种方法安全吗？答案是当然不安全了，这种保存方式很容易被窃取。所以在保存用户名、密码时需要做加密处理，而且要用非对称加密方式。对称加密方式在源码外泄时，很容易被方向推算出来。见到过团队就是简单加密后保存的，这种做法存在极大的安全隐患。</p>
<p>还有就是，在登录时有验证码的情况。在这种情况下，就需要重构了，上面的提到的登录方式是不能自动提交验证码的。当然，自动提交验证码就失去了验证码的意义了。此种情况下就需要使用cookie了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;自动登录应该是比较常见的需求了，绝大多数的APP都有这个功能。所谓自动登录，就是登录之后，在下次重启App后用户仍然可以登录，而不需要重新输
    
    </summary>
    
    
      <category term="Android" scheme="http://joytan1209.github.io/tags/Android/"/>
    
      <category term="移动开发" scheme="http://joytan1209.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>阿里Weex跨平台开发工具开源啦</title>
    <link href="http://joytan1209.github.io/2016/04/22/%E9%98%BF%E9%87%8CWeex%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%BC%80%E6%BA%90%E5%95%A6/"/>
    <id>http://joytan1209.github.io/2016/04/22/阿里Weex跨平台开发工具开源啦/</id>
    <published>2016-04-22T06:33:53.000Z</published>
    <updated>2017-06-05T01:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Weex简介"><a href="#Weex简介" class="headerlink" title="Weex简介"></a>Weex简介</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="../../../../images/weex.png" alt="Weex" title="">
                </div>
                <div class="image-caption">Weex</div>
            </figure>
<p>Weex能够完美兼顾性能与动态性，让移动开发者通过简捷的前端语法写出Native级别的性能体验，并支持iOS、安卓、YunOS及Web等多端部署。</p>
<p>阿里巴巴与2016年4月21日在Qcon大会上宣布跨平台开发工具Weex开放内测邀请。<br>可以在官网申请：<a href="http://alibaba.github.io/weex/index.html#subscriptionWeex" target="_blank" rel="external">Weex</a>，又一前端开发者的福音！目前内测邀请只有Android版本，据说，在6月份将全部开源:iOS、Android、H5</p>
<h2 id="解决的痛点"><a href="#解决的痛点" class="headerlink" title="解决的痛点"></a>解决的痛点</h2><p>Why?为什么要使用呢</p>
<p>Weex主要解决了两大痛点：频繁发版和多端研发，同时解决了前端语言性能差和显示效果受限的问题。</p>
<p>我们只需要在自己的APP中依赖Weex的SDK，就可以用HTML/CSS/JavaScript来开发Native级别的界面。可以部署在服务端，在APP中执行请求。</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>相比最近比较火的开源跨平台移动开放项目React Native，Weex更加轻量，提交更加小巧。当然，他们各自的实现方式有所不同。Weex基于web conponent标准，使得开发更加简洁标准，方便上手。Native组件和API都可以横向扩展，方便根据业务灵活定制。Weex渲染层具备优异的性能表现，能够跨平台实现一致的布局效果和实现。对于前端开发来说，Weex能够实现组件化开发、自动化数据绑定，并拥抱Web标准。</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>官方的案例：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="../../../../images/weex_demo.png" alt="Weex Demo" title="">
                </div>
                <div class="image-caption">Weex Demo</div>
            </figure><br>具体可以在官网下载<a href="http://alibaba.github.io/weex/download.html" target="_blank" rel="external">Weex playground App</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Weex简介&quot;&gt;&lt;a href=&quot;#Weex简介&quot; class=&quot;headerlink&quot; title=&quot;Weex简介&quot;&gt;&lt;/a&gt;Weex简介&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=
    
    </summary>
    
    
      <category term="杂谈" scheme="http://joytan1209.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Androidy启动页广告实现</title>
    <link href="http://joytan1209.github.io/2016/04/21/Androidy%E5%90%AF%E5%8A%A8%E9%A1%B5%E5%B9%BF%E5%91%8A%E5%AE%9E%E7%8E%B0/"/>
    <id>http://joytan1209.github.io/2016/04/21/Androidy启动页广告实现/</id>
    <published>2016-04-21T08:50:10.000Z</published>
    <updated>2017-06-05T01:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>启动页展示广告。主要功能：1.在启动的时候显示广告;2.【跳过】功能，倒计时3秒;3.查看广告详情。<br>如图所示：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="../../../../images/ad_1.png" alt="启动页广告" title="">
                </div>
                <div class="image-caption">启动页广告</div>
            </figure></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>layout布局文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 广告图片 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/splash_logo"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:visibility</span>=<span class="string">"visible"</span></div><div class="line">        <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 跳过 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/lin_skip"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"40dp"</span></div><div class="line">        <span class="attr">android:padding</span>=<span class="string">"4dp"</span></div><div class="line">        <span class="attr">android:layout_marginRight</span>=<span class="string">"8dp"</span></div><div class="line">        <span class="attr">android:background</span>=<span class="string">"@drawable/splash_skip"</span></div><div class="line">        <span class="attr">android:visibility</span>=<span class="string">"gone"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/textView"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"3"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"@color/white"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"16sp"</span> /&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:paddingRight</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"跳过"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"@color/white"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"16sp"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>【跳过】按钮背景：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> &gt;</span></div><div class="line">    <span class="comment">&lt;!-- 填充色 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#CBCBCB"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 圆角 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">corners</span> <span class="attr">android:radius</span>=<span class="string">"18dp"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Activity文件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplashActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> <span class="keyword">implements</span> <span class="title">ISplashActivity</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Bind</span>(R.id.splash_logo)</div><div class="line">    ImageView splashLogo;</div><div class="line">    <span class="meta">@Bind</span>(R.id.logo_layout)</div><div class="line">    LinearLayout logoLayout;</div><div class="line">    <span class="keyword">private</span> Intent intent;</div><div class="line">    <span class="meta">@Bind</span>(R.id.textView)</div><div class="line">    TextView textView;</div><div class="line">    <span class="meta">@Bind</span>(R.id.lin_skip)</div><div class="line">    LinearLayout linSkip;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">3</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> ISplashPresenter splashPresenter;</div><div class="line">    <span class="keyword">private</span> HttpParams httpParams;</div><div class="line">    <span class="keyword">private</span> ADBean adBean;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置root界面</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRootView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setRootView();</div><div class="line">        setContentView(R.layout.activity_splansh);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.initData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWidget</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.initWidget();</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        logoLayout.setVisibility(View.VISIBLE);</div><div class="line">        splashPresenter = <span class="keyword">new</span> SplashPresenter(<span class="keyword">this</span>);</div><div class="line">        httpParams = <span class="keyword">new</span> HttpParams();</div><div class="line">        splashPresenter.getSplashAD(httpParams);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGetSplashADSuccess</span><span class="params">(ADBean adBean)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.adBean = adBean;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != adBean &amp;&amp; <span class="keyword">null</span> != adBean.getData() &amp;&amp; !<span class="string">""</span>.equals(adBean.getData().getImagePath()) &amp;&amp; <span class="keyword">null</span> != adBean.getData().getImagePath()) &#123;</div><div class="line">            ImageLoader imageLoader = ImageLoader.getInstance();</div><div class="line">            imageLoader.displayImage(API.FTP_SERVER + adBean.getData().getImagePath(), splashLogo, TrueLoveApp.options);</div><div class="line">            linSkip.setVisibility(View.VISIBLE);</div><div class="line">            handler.sendEmptyMessageDelayed(<span class="number">0</span>, <span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            splashLogo.setImageResource(R.mipmap.ic_splash);</div><div class="line">            splashLogo.setClickable(<span class="keyword">false</span>);</div><div class="line">            linSkip.setVisibility(View.GONE);</div><div class="line">            handler.sendEmptyMessageDelayed(-<span class="number">1</span>, <span class="number">1000</span>);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.splash_logo)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSplashLogoClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        handler.removeMessages(<span class="number">0</span>);</div><div class="line">        startActivtiy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.lin_skip)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnSkipClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        handler.removeMessages(<span class="number">0</span>);</div><div class="line">        handler.sendEmptyMessageDelayed(<span class="number">1</span>, <span class="number">100</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onGetSplashADError</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        splashLogo.setImageResource(R.mipmap.ic_splash);</div><div class="line">        splashLogo.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                intent = <span class="keyword">new</span> Intent(SplashActivity.<span class="keyword">this</span>, MainActivity.class);</div><div class="line">                startActivity(intent);</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;, CommonContant.SPLANSH_TIME);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        count--;</div><div class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class);</div><div class="line">            startActivity(intent);</div><div class="line">            finish();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(android.os.Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (msg.what == <span class="number">0</span>) &#123;</div><div class="line">                textView.setText(getCount()+<span class="string">""</span>);</div><div class="line">                handler.sendEmptyMessageDelayed(<span class="number">0</span>, <span class="number">1000</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 跳过</span></div><div class="line">            <span class="keyword">if</span> (msg.what == <span class="number">1</span>) &#123;</div><div class="line">                handler.removeMessages(<span class="number">1</span>);</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(SplashActivity.<span class="keyword">this</span>, MainActivity.class);</div><div class="line">                startActivity(intent);</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 无广告</span></div><div class="line">            <span class="keyword">if</span> (msg.what == -<span class="number">1</span>) &#123;</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(SplashActivity.<span class="keyword">this</span>, MainActivity.class);</div><div class="line">                startActivity(intent);</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Activity跳转</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startActivtiy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != adBean) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="string">"1"</span>.equals(adBean.getData().getRelatedContext())) &#123; <span class="comment">//shop</span></div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(mContext, SellerShopDetailActivity.class);</div><div class="line">                intent.putExtra(<span class="string">"shopid"</span>, adBean.getData().getRelatedContentId());</div><div class="line">                mContext.startActivity(intent);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"2"</span>.equals(adBean.getData().getRelatedContext())) &#123; <span class="comment">//product</span></div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(mContext, SellerProductDetailActivity.class);</div><div class="line">                intent.putExtra(<span class="string">"productid"</span>, adBean.getData().getRelatedContentId());</div><div class="line">                mContext.startActivity(intent);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                adBean.getData().setAdContent(<span class="keyword">new</span> String(Base64.decode(adBean.getData().getAdContent(), Base64.DEFAULT)));</div><div class="line">                Intent intent = <span class="keyword">new</span> Intent(mContext, HomeADDetailActivity.class);</div><div class="line">                intent.putExtra(<span class="string">"flag"</span>, <span class="string">"splash"</span>);</div><div class="line">                intent.putExtra(<span class="string">"bean"</span>, adBean);</div><div class="line">                mContext.startActivity(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p>启动页：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="../../../../images/ad.png" alt="广告" title="">
                </div>
                <div class="image-caption">广告</div>
            </figure><br>广告详情：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="../../../../images/ad_detail.png" alt="广告详情" title="">
                </div>
                <div class="image-caption">广告详情</div>
            </figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;启动页展示广告。主要功能：1.在启动的时候显示广告;2.【跳过】功能，倒计时3秒;3.查看广告详情。&lt;br&gt;如图所示：&lt;br&gt;&lt;figure
    
    </summary>
    
    
      <category term="Android" scheme="http://joytan1209.github.io/tags/Android/"/>
    
      <category term="移动开发" scheme="http://joytan1209.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android N将逐步实现对VR支持</title>
    <link href="http://joytan1209.github.io/2016/04/18/Android%20N%E5%B0%86%E9%80%90%E6%AD%A5%E5%AE%9E%E7%8E%B0%E5%AF%B9VR%E6%94%AF%E6%8C%81/"/>
    <id>http://joytan1209.github.io/2016/04/18/Android N将逐步实现对VR支持/</id>
    <published>2016-04-18T06:07:10.000Z</published>
    <updated>2017-06-05T01:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>据国外媒体报道，在Android N的开发者预览版中支持VR功能，同时支持Khronos最新Vulkan API。其他还支持全新的3D渲染API（Vulkan）、Emoji Unicode 9、压感屏及面向平板的分屏多任务模式等。</p>
<p>在Android系统中，可以通过以下路径来访问这个炫酷的功能:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Settings（设置） -&gt; Apps（应用） -&gt; Configure apps（应用配置） -&gt; Special Access（特殊访问） -&gt; VR helper services（虚拟现实辅助服务）</div></pre></td></tr></table></figure></p>
<p>然后将显示接入这个API的应用列表，用户可以选择永许或者拒绝。这看起来似乎很快就可以有一个名为VR Listener”或者“VR helper”的应用了。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="../../../../images/vr_help_services.jpg" alt="VR helper services" title="">
                </div>
                <div class="image-caption">VR helper services</div>
            </figure></p>
<p>有关VR的细节暂不清楚，但《华尔街日报》在2月份提到过，Google正赶在推出自家基于智能机的头戴式装之前优化Android，让它能够更好地支持VR设备。</p>
<p>有关VR模式的一个猜想是，其会禁用手机的自锁机制，以避免使用一段时间后突然“黑屏”。此外，Google据说还在打造一款无需智能机或PC的独立装置。</p>
<p>根据报道还说有一个新硬件支持标志，名为“Config Sustained Performance Mode Supported”，Ars Technica的Ron Amadeo觉得它可能是一个特殊的功能，允许持续直接使用手机的CPU和GPU，跟Gear VR能够在兼容的三星手机上运行的方式类似。</p>
<p>我们知道谷歌的虚拟现实雄心远远超过了Cardboard，现在通过这个新版本系统的更新可以得道印证。在2016年第三季度Android N发布之前，谷歌至少在计划另外3个开发商预览版，所以我们可能会继续看到虚拟现实功能的增加。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;据国外媒体报道，在Android N的开发者预览版中支持VR功能，同时支持Khronos最新Vulkan API。其他还支持全新的3D渲染API（Vulkan）、Emoji Unicode 9、压感屏及面向平板的分屏多任务模式等。&lt;/p&gt;
&lt;p&gt;在Android系统中，可以
    
    </summary>
    
    
      <category term="杂谈" scheme="http://joytan1209.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
      <category term="Android" scheme="http://joytan1209.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio Gradle</title>
    <link href="http://joytan1209.github.io/2016/04/09/Gradle/"/>
    <id>http://joytan1209.github.io/2016/04/09/Gradle/</id>
    <published>2016-04-09T13:50:04.000Z</published>
    <updated>2017-06-05T01:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Android Studio 使用 Gradle 构建工具，而 Gradle 继承了强大、灵活的 Ant 和 Maven 丰富的依赖管理，配置管理简单，脚本编写方便灵活，插件模块化。</p>
<p>Android Studio 使用 Gradle 构建工具，Eclipse 的 ADT 插件使用的是 Ant 构建工具。因为两个构建工具的区别，导致习惯了 Eclipse 开发环境的开发者刚开始比较难适应 Android Studio。如果要迁移到 Android Studio，建议最好了解下 Gradle 构建工具。Gradle 构建工具是任务驱动型的构建工具，并且可以通过各种 Plugin 插件扩展功能以适应各种构建任务。对应 Android 项目的 Gradle 插件就是 Android Gradle Plugin。</p>
<h3 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h3><p>Android Studio相比ADT的好处就不啰嗦了，好马配好鞍，Android Studio为什么采用Gradle作为构建工具呢？Gradle是一个优秀的构建系统和构建工具，可以通过插件来创建自定的义构建逻辑。<br>Gradle的优点：</p>
<ul>
<li>采用了Domain Specific Language(DSL 语言) 来描述和控制构建逻辑。</li>
<li>构建文件基于 Groovy，并且允许通过混合声明 DSL 元素和使用代码来控制 DSL 元素以控制自定义的构建逻辑。</li>
<li>支持 Maven 或者 Ivy 的依赖管理。</li>
<li>非常灵活。允许使用最好的实现，但是不会强制实现的方式。</li>
<li>插件可以提供自己的 DSL 和 API 以供构建文件使用。</li>
<li>良好的 API 工具供 IDE 集成。</li>
</ul>
<p>Gradle构建系统的目标：</p>
<ul>
<li>让重用代码和资源变得更加容易</li>
<li>让创建同一个APP的不同版本变得更加容易，无论是多个APP发布版本还是同一个发布不同的版本</li>
<li>让构建过程变得更加容易配置，扩展和定制</li>
<li>整合优秀IDE</li>
</ul>
<h3 id="项目的构建文件"><a href="#项目的构建文件" class="headerlink" title="项目的构建文件"></a>项目的构建文件</h3><p>Gradle在Android Studio的项目中是如何使用的呢？一个Gradle项目的构建过程定义在了build.gradle的文件中，在项目的根目录下，如图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="../../../../img/project.png" alt="android项目" title="">
                </div>
                <div class="image-caption">android项目</div>
            </figure>
<p>最简单的Android项目的build.gradle文件包含以下内容：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:0.11.1'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply plugin: <span class="string">'android'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">19</span></div><div class="line">    buildToolsVersion <span class="string">"19.0.0"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单分析下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">buildscrip&#123;...&#125;</div></pre></td></tr></table></figure>
<p>配置驱动构建过程的代码，在这个部分声明了使用Maven仓库，并且声明了一个maven文件的依赖路径。这个文件就是包含了0.11.1版本android gradle插件的库。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'android'</span></div></pre></td></tr></table></figure>
<p>这里添加了android插件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android&#123;...&#125;</div></pre></td></tr></table></figure>
<p>这里配置android构建过程需要的参数</p>
<p>默认情况下，只需要配置目标编译SDK版本和编译工具版本，即compileSdkVersion和buildToolsVersion属性。 这个complieSdkVersion属性相当于旧构建系统中project.properites文件中的target属性。这个新的属性可以跟旧的target属性一样指定一个int或者String类型的值。</p>
<p>与上面基本的构建文件对应的是一个默认的文件夹结构。Gradle遵循约定优先于配置的概念，我们需要在可能的情况尽可能提供合理的默认配置参数。</p>
<p>基本的项目开始于两个名为“source sets”的组件，即main source code和test code。分别位于：</p>
<ul>
<li>src/main/</li>
<li>src/androidTest/<br>里面每一个文件夹都有与之相应的源组件:</li>
<li>AndroidManifest.xml</li>
<li>res/</li>
<li>assets/</li>
<li>aidl/</li>
<li>rs/</li>
<li>jni/</li>
</ul>
<h3 id="配置结构"><a href="#配置结构" class="headerlink" title="配置结构"></a>配置结构</h3><p>当默认的项目结构不适用的时候，你可能需要去配置它。根据Gradle文档，重新为Android项目sourceSets。例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    sourceSets &#123;</div><div class="line">        main &#123;</div><div class="line">            manifest.srcFile <span class="string">'AndroidManifest.xml'</span></div><div class="line">            java.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            resources.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            aidl.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            renderscript.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            res.srcDirs = [<span class="string">'res'</span>]</div><div class="line">            assets.srcDirs = [<span class="string">'assets'</span>]</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        androidTest.setRoot(<span class="string">'tests'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它使用了旧项目结构中的main源码，并且将androidTest <em>sourceSet</em>组件重新映射到<em>tests</em>文件夹。</p>
<h3 id="构建任务"><a href="#构建任务" class="headerlink" title="构建任务"></a>构建任务</h3><p>添加一个插件到构建文件中将会自动创建一系列构建任务(build tasks)去执行（注：gradle属于任务驱动型构建工具，它的构建过程是基于Task的）。Java plugin和Android plugin都会创建以下task：</p>
<ul>
<li>assemble<br>  这个task将会组合项目的所有输出。</li>
<li>check<br>  这个task将会执行所有检查。</li>
<li>connectedCheck<br>  这个task将会在一个指定的设备或者模拟器上执行检查，它们可以同时在所有连接的设备上执行。</li>
<li>deviceCheck<br>  通过APIs连接远程设备来执行检查，这是在CL服务器上使用的。</li>
<li>build<br>  这个task将会执行assemble和check两个task的所有工作</li>
<li>clean<br>  这个task将会清空项目的输出。</li>
</ul>
<p>实际上assemble，check，build这三个task不做任何事情。它们只是一个Task标志，用来告诉android plugin添加实际需要执行的task去完成这些工作。</p>
<p>这就允许你去调用相同的task，而不需要考虑当前是什么类型的项目，或者当前项目添加了什么plugin。 例如，添加了findbugs plugin将会创建一个新的task并且让check task依赖于这个新的task。当check task被调用的时候，这个新的task将会先被调用。</p>
<p>在命令行环境中，你可以执行以下命令来获取更多高级别的task：</p>
<pre><code>gradle tasks
</code></pre><p>查看所有task列表和它们之间的依赖关系可以执行以下命令：</p>
<pre><code>gradle tasks --all
</code></pre><p>注意：<br>Gradle会自动监视一个task声明的所有输入和输出。<br>两次执行build task并且期间项目没有任何改动，gradle将会使用UP-TO-DATE通知所有task。这意味着第二次build执行的时候不会请求任何task执行。这允许task之间互相依赖，而不会导致不需要的构建请求被执行。</p>
<p>一个Android项目至少拥有两个输出：debug APK（调试版APK)和release APK（发布版APK）。每一个输出都拥有自己的标识性task以便能够单独构建它们。</p>
<ul>
<li>assemble<ul>
<li>assembleDebug</li>
<li>assembleRelease<br>它们都依赖于其它一些tasks以完成构建一个APK需要多个步骤。其中assemble task依赖于这两个task，所以执行assemble将会同时构建出两个APK。</li>
</ul>
</li>
</ul>
<p>check task也拥有自己的依赖：</p>
<ul>
<li>check<ul>
<li>lint</li>
</ul>
</li>
<li>connectedCheck<ul>
<li>connectedAndroidTest</li>
<li>connectedUiAutomatorTest(目前还没有应用到）</li>
</ul>
</li>
<li>deviceCheck<ul>
<li>这个test依赖于test创建时，其它实现测试扩展点的插件。</li>
</ul>
</li>
</ul>
<p>最后，只要task能够被安装（那些要求签名的task），android plugin就会为所有构建类型（debug，release，test）安装或者卸载。</p>
<h3 id="基本的构建定制"><a href="#基本的构建定制" class="headerlink" title="基本的构建定制"></a>基本的构建定制</h3><p>Android plugin提供了大量DSL用于直接从构建系统定制大部分事情。</p>
<p>Manifest 属性</p>
<p>通过SDL可以配置一下manifest选项：</p>
<ul>
<li>minSdkVersion</li>
<li>targetSdkVersion</li>
<li>versionName</li>
<li>applicationId (有效的包名 – 更多详情请查阅ApplicationId 对比 PackageName)</li>
<li>package Name for the test application</li>
<li>Instrumentation test runner</li>
</ul>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">19</span></div><div class="line">    buildToolsVersion <span class="string">"19.0.0"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        versionCode <span class="number">12</span></div><div class="line">        versionName <span class="string">"2.0"</span></div><div class="line">        minSdkVersion <span class="number">16</span></div><div class="line">        targetSdkVersion <span class="number">16</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在android元素中的defaultConfig元素中定义所有配置。</p>
<h3 id="构建类型"><a href="#构建类型" class="headerlink" title="构建类型"></a>构建类型</h3><p>默认情况下，Android Plugin会自动给项目设置同时构建应用程序的debug和release版本。 两个版本之间的不同主要围绕着能否在一个安全设备上调试，以及APK如何签名。</p>
<p>Debug版本采用使用通用的name/password键值对自动创建的数字证书进行签名，以防止构建过程中出现请求信息。Release版本在构建过程中没有签名，需要稍后再签名。</p>
<p>这些配置通过一个BuildType对象来配置。默认情况下，这两个实例都会被创建，分别是一个debug版本和一个release版本。</p>
<p>Android plugin允许像创建其他构建类型一样定制debug和release实例。这需要在buildTypes的DSL容器中配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    buildTypes &#123;</div><div class="line">        debug &#123;</div><div class="line">            applicationIdSuffix <span class="string">".debug"</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        jnidebug.initWith(buildTypes.debug)</div><div class="line">        jnidebug &#123;</div><div class="line">            packageNameSuffix <span class="string">".jnidebug"</span></div><div class="line">            jnidebugBuild <span class="keyword">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码片段实现了以下功能：</p>
<ul>
<li>配置默认的debug构建类型<ul>
<li>将debug版本的包名设置为.debug以便能够同时在一台设备上安装<em>debug</em>和<em>release</em>版本的apk。</li>
<li>创建了一个名为jnidebug的新构建类型，并且这个构建类型是debug构建类型的一个副本。</li>
<li>继续配置jnidebug构建类型，允许使用JNI组件，并且也添加了不一样的包名后缀。</li>
</ul>
</li>
</ul>
<p>创建一个新的构建类型就是简单的在buildType标签下添加一个新的元素，并且可以使用initWith()或者直接使用闭包来配置它。</p>
<h3 id="签名配置"><a href="#签名配置" class="headerlink" title="签名配置"></a>签名配置</h3><p>对一个应用程序签名需要以下：</p>
<ul>
<li>一个Keystory</li>
<li>一个keystory密码</li>
<li>一个key的别名</li>
<li>一个key的密码</li>
<li>存储类型</li>
</ul>
<p>位置，键名，两个密码，还有存储类型一起形成了签名配置。</p>
<p>默认情况下，debug被配置成使用一个debug keystory。 debug keystory使用了默认的密码和默认key及默认的key密码。 debug keystory的位置在$HOME/.android/debug.keystroe，如果对应位置不存在这个文件将会自动创建一个。</p>
<p>debug Build Type(构建类型) 会自动使用debug SigningConfig (签名配置)。</p>
<p>可以创建其他配置或者自定义内建的默认配置。通过signingConfigs这个DSL容器来配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    signingConfigs &#123;</div><div class="line">        debug &#123;</div><div class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"debug.keystore"</span>)</span></span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        myConfig &#123;</div><div class="line">            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"other.keystore"</span>)</span></span></div><div class="line">            storePassword "android"</div><div class="line">            keyAlias "androiddebugkey"</div><div class="line">            keyPassword "android"</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        foo &#123;</div><div class="line">            debuggable <span class="keyword">true</span></div><div class="line">            jniDebugBuild <span class="keyword">true</span></div><div class="line">            signingConfig signingConfigs.myConfig</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码片段修改debug keystory的路径到项目的根目录下。在这个例子中，这将自动影响其他使用到debug构建类型的构建类型。</p>
<h3 id="运行-Proguard"><a href="#运行-Proguard" class="headerlink" title="运行 Proguard"></a>运行 Proguard</h3><p>从Gradle Plugin for ProGuard version 4.10之后就开始支持ProGuard。ProGuard插件是自动添加进来的。如果<em>Build Type</em>的<em>runProguard</em>属性被设置为true，对应的task将会自动创建。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            <span class="function">runProguard <span class="keyword">true</span></span></div><div class="line">            proguardFile <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    productFlavors &#123;</div><div class="line">        flavor1 &#123;</div><div class="line">        &#125;</div><div class="line">        flavor2 &#123;</div><div class="line">            proguardFile <span class="string">'some-other-rules.txt'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发布版本将会使用它的Build Type中声明的规则文件，product flavor（定制的产品版本）将会使用对应flavor中声明的规则文件。</p>
<p>这里有两个默认的规则文件：</p>
<ul>
<li>proguard-android.txt</li>
<li>proguard-android-optimize.txt</li>
</ul>
<p>这两个文件都在SDK的路径下。使用<em>getDefaultProguardFile()</em>可以获取这些文件的完整路径。它们除了是否要进行优化之外，其它都是相同的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;Android Studio 使用 Gradle 构建工具，而 Gradle 继承了强大、灵活的 Ant 和 Maven 丰富的依赖管理，配
    
    </summary>
    
    
      <category term="Android" scheme="http://joytan1209.github.io/tags/Android/"/>
    
      <category term="移动开发" scheme="http://joytan1209.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android 6.0 动态权限管理</title>
    <link href="http://joytan1209.github.io/2016/04/08/%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>http://joytan1209.github.io/2016/04/08/动态权限管理/</id>
    <published>2016-04-08T06:16:09.000Z</published>
    <updated>2017-06-05T01:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>随着Android6.0的发布，更多的新特性被推出，极大的提升了用户体验，但同时也做了一些改变，对开发人员带来了一定的麻烦。</p>
<p>Android 6.0在我们原有的AndroidManifest.xml声明权限的基础上，又新增了运行时权限动态检测，以下权限都需要在运行时判断：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">身体传感器</div><div class="line">日历</div><div class="line">摄像头</div><div class="line">通讯录</div><div class="line">地理位置</div><div class="line">麦克风</div><div class="line">电话</div><div class="line">短信</div><div class="line">存储空间</div></pre></td></tr></table></figure>
<h3 id="运行时权限处理"><a href="#运行时权限处理" class="headerlink" title="运行时权限处理"></a>运行时权限处理</h3><p>Android6.0系统默认为targetSdkVersion小于23的应用默认授予了所申请的所有权限，所以如果你以前的APP设置的targetSdkVersion低于23，在运行时也不会崩溃，但这也只是一个临时的救急策略，用户还是可以在设置中取消授予的权限。</p>
<p>虽然系统有默认的授权提示框，但我们人需要自己来配置页面。因为系统默认的授权提示框，有【不再提示】的选项，如果被选择，则再也无法触发授权提示了。只有使用我们自定义的授权提示页面，才可以引导用户修改授权。</p>
<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>权限有分为【危险权限】和【一般权限】，危险权限必须要授权才可以使用，一般权限则不需要，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--危险权限--&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.READ_CALENDAR"</span>/&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.WRITE_CALENDAR"</span>/&gt;</div><div class="line"></div><div class="line">&lt;!--一般权限--&gt;</div><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>既然要实现自定义授权页面，那我需要写一个权限检查的工具类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 权限检查工具类</div><div class="line"> * </div><div class="line"> * Created by tanchaoyin on 16/1/26.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionsCheckerUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PermissionsCheckerUtil</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mContext = context.getApplicationContext();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断权限列表</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPermissions</span><span class="params">(String... permissions)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (String permission : permissions) &#123;</div><div class="line">            <span class="keyword">if</span> (checkPermission(permission)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 否缺少权限的判断</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkPermission</span><span class="params">(String permission)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ContextCompat.checkSelfPermission(mContext, permission) ==</div><div class="line">                PackageManager.PERMISSION_DENIED;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义授权页面"><a href="#自定义授权页面" class="headerlink" title="自定义授权页面"></a>自定义授权页面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 权限获取页面</div><div class="line"> * </div><div class="line"> * Created by tanchaoyin on 16/1/26.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionsActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSIONS_GRANTED = <span class="number">0</span>; <span class="comment">// 权限授权</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSIONS_DENIED = <span class="number">1</span>; <span class="comment">// 权限拒绝</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERMISSION_REQUEST_CODE = <span class="number">0</span>; <span class="comment">// 系统权限管理页面的参数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTRA_PERMISSIONS = <span class="string">"com.tanchaoyin.permission.extra_permission"</span>; <span class="comment">// 权限参数</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE_URL_SCHEME = <span class="string">"package:"</span>; <span class="comment">// 方案</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> PermissionsChecker mChecker; <span class="comment">// 权限检测器</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isRequireCheckFlag; <span class="comment">// 是否需要系统权限检测</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">(Activity activity, <span class="keyword">int</span> requestCode, String... permissions)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(activity, PermissionsActivity.class);</div><div class="line">        intent.putExtra(EXTRA_PERMISSIONS, permissions);</div><div class="line">        ActivityCompat.startActivityForResult(activity, intent, requestCode, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        <span class="keyword">if</span> (getIntent() == <span class="keyword">null</span> || !getIntent().hasExtra(EXTRA_PERMISSIONS)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"呵呵，出错了哦。需要静态的startActivityForResult方法才可以启动哦！！！"</span>);</div><div class="line">        &#125;</div><div class="line">        setContentView(R.layout.activity_permissions);</div><div class="line"></div><div class="line">        mChecker = <span class="keyword">new</span> PermissionsChecker(<span class="keyword">this</span>);</div><div class="line">        isRequireCheckFlag = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        <span class="keyword">if</span> (isRequireCheckFlag) &#123;</div><div class="line">            String[] permissions = getPermissions();</div><div class="line">            <span class="keyword">if</span> (mChecker.lacksPermissions(permissions)) &#123;</div><div class="line">                requestPermissions(permissions); <span class="comment">// 请求权限</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                allPermissionsGranted(); <span class="comment">// 全部权限都已获取</span></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            isRequireCheckFlag = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 返回传递的权限参数</span></div><div class="line">    <span class="keyword">private</span> String[] getPermissions() &#123;</div><div class="line">        <span class="keyword">return</span> getIntent().getStringArrayExtra(EXTRA_PERMISSIONS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 请求权限兼容低版本</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestPermissions</span><span class="params">(String... permissions)</span> </span>&#123;</div><div class="line">        ActivityCompat.requestPermissions(<span class="keyword">this</span>, permissions, PERMISSION_REQUEST_CODE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 全部权限均已获取</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">allPermissionsGranted</span><span class="params">()</span> </span>&#123;</div><div class="line">        setResult(PERMISSIONS_GRANTED);</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用户权限处理</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> requestCode</div><div class="line">     * <span class="doctag">@param</span> permissions</div><div class="line">     * <span class="doctag">@param</span> grantResults</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (requestCode == PERMISSION_REQUEST_CODE &amp;&amp; checkAllPermissionsGranted(grantResults)) &#123;</div><div class="line">            isRequireCheckFlag = <span class="keyword">true</span>;</div><div class="line">            allPermissionsGranted();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            isRequireCheckFlag = <span class="keyword">false</span>;</div><div class="line">            showMissingPermissionDialog();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断是否有全部的权限</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkAllPermissionsGranted</span><span class="params">(@NonNull <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> grantResult : grantResults) &#123;</div><div class="line">            <span class="keyword">if</span> (grantResult == PackageManager.PERMISSION_DENIED) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 显示缺失权限提示</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showMissingPermissionDialog</span><span class="params">()</span> </span>&#123;</div><div class="line">        AlertDialog.Builder builder = <span class="keyword">new</span> AlertDialog.Builder(PermissionsActivity.<span class="keyword">this</span>);</div><div class="line">        builder.setTitle(R.string.help);</div><div class="line">        builder.setMessage(R.string.string_help_text);</div><div class="line"></div><div class="line">        <span class="comment">// 拒绝, 退出应用</span></div><div class="line">        builder.setNegativeButton(R.string.quit, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                setResult(PERMISSIONS_DENIED);</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        builder.setPositiveButton(R.string.settings, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</div><div class="line">                startAppSettings();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        builder.show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 启动应用的设置</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startAppSettings</span><span class="params">()</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);</div><div class="line">        intent.setData(Uri.parse(PACKAGE_URL_SCHEME + getPackageName()));</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="权限使用"><a href="#权限使用" class="headerlink" title="权限使用"></a>权限使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CODE = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 需要使用的所有权限</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String[] PERMISSIONS = <span class="keyword">new</span> String[]&#123;</div><div class="line">            Manifest.permission.READ_CALENDAR,</div><div class="line">            Manifest.permission.WRITE_CALENDAR,</div><div class="line">            Manifest.permission.INTERNET</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Bind</span>(R.id.toolbar) Toolbar toolbar;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> PermissionsCheckerUtil permissionsCheckerUtil; <span class="comment">// 权限检测器</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        setSupportActionBar(mTToolbar);</div><div class="line"></div><div class="line">        permissionsCheckerUtil = <span class="keyword">new</span> PermissionsCheckerUtil(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line"></div><div class="line">        <span class="comment">// 没有权限, 则进入权限配置页面</span></div><div class="line">        <span class="keyword">if</span> (permissionsCheckerUtil.lacksPermissions(PERMISSIONS)) &#123;</div><div class="line">            <span class="comment">// 权限配置页面</span></div><div class="line">            startPermissionsActivity();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startPermissionsActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">        PermissionsActivity.startActivityForResult(<span class="keyword">this</span>, REQUEST_CODE, PERMISSIONS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line">        <span class="comment">// 拒绝授权, 关闭页面, 没有主要权限的情况下无法运行</span></div><div class="line">        <span class="keyword">if</span> (requestCode == REQUEST_CODE &amp;&amp; resultCode == PermissionsActivity.PERMISSIONS_DENIED) &#123;</div><div class="line">            finish();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一下这些权限，可以直接声明使用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</div><div class="line">android.permission.ACCESS_NETWORK_STATE</div><div class="line">android.permission.ACCESS_NOTIFICATION_POLICY</div><div class="line">android.permission.ACCESS_WIFI_STATE</div><div class="line">android.permission.ACCESS_WIMAX_STATE</div><div class="line">android.permission.BLUETOOTH</div><div class="line">android.permission.BLUETOOTH_ADMIN</div><div class="line">android.permission.BROADCAST_STICKY</div><div class="line">android.permission.CHANGE_NETWORK_STATE</div><div class="line">android.permission.CHANGE_WIFI_MULTICAST_STATE</div><div class="line">android.permission.CHANGE_WIFI_STATE</div><div class="line">android.permission.CHANGE_WIMAX_STATE</div><div class="line">android.permission.DISABLE_KEYGUARD</div><div class="line">android.permission.EXPAND_STATUS_BAR</div><div class="line">android.permission.FLASHLIGHT</div><div class="line">android.permission.GET_ACCOUNTS</div><div class="line">android.permission.GET_PACKAGE_SIZE</div><div class="line">android.permission.INTERNET</div><div class="line">android.permission.KILL_BACKGROUND_PROCESSES</div><div class="line">android.permission.MODIFY_AUDIO_SETTINGS</div><div class="line">android.permission.NFC</div><div class="line">android.permission.READ_SYNC_SETTINGS</div><div class="line">android.permission.READ_SYNC_STATS</div><div class="line">android.permission.RECEIVE_BOOT_COMPLETED</div><div class="line">android.permission.REORDER_TASKS</div><div class="line">android.permission.REQUEST_INSTALL_PACKAGES</div><div class="line">android.permission.SET_TIME_ZONE</div><div class="line">android.permission.SET_WALLPAPER</div><div class="line">android.permission.SET_WALLPAPER_HINTS</div><div class="line">android.permission.SUBSCRIBED_FEEDS_READ</div><div class="line">android.permission.TRANSMIT_IR</div><div class="line">android.permission.USE_FINGERPRINT</div><div class="line">android.permission.VIBRATE</div><div class="line">android.permission.WAKE_LOCK</div><div class="line">android.permission.WRITE_SYNC_SETTINGS</div><div class="line">com.android.alarm.permission.SET_ALARM</div><div class="line">com.android.launcher.permission.INSTALL_SHORTCUT</div><div class="line">com.android.launcher.permission.UNINSTALL_SHORTCUT</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着Android6.0的发布，更多的新特性被推出，极大的提升了用户体验，但同时也做了一些改变，对开发人员带来了一定的麻烦。&lt;/p&gt;
&lt;p&gt;Android 6.0在我们原有的AndroidManifest.xml声明权限的基础上，又新增了运行时权限动态检测，以下权限都需要在
    
    </summary>
    
    
      <category term="Android" scheme="http://joytan1209.github.io/tags/Android/"/>
    
      <category term="移动开发" scheme="http://joytan1209.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android IPC机制</title>
    <link href="http://joytan1209.github.io/2016/04/07/IPC%E6%9C%BA%E5%88%B6/"/>
    <id>http://joytan1209.github.io/2016/04/07/IPC机制/</id>
    <published>2016-04-07T02:38:40.000Z</published>
    <updated>2017-06-05T01:44:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Android IPC机制</strong></p>
<p>在任何一个操作系统中都需要IPC机制的存在，例如：Linux中通过共享内存、命名通道等来实现进程间的通信。然而在Android系统中是什么来实现呢？答案是Binder。当然，不仅使用了Binder机制来实现了IPC,还使用了Socket实现不同终端之间的通信。</p>
<h3 id="IPC介绍"><a href="#IPC介绍" class="headerlink" title="IPC介绍"></a>IPC介绍</h3><p>1、Serializable接口是Java中为对象提供标准的序列化和反序列化操作的接口，而Parcelable接口是Android提供的序列化方式的接口。</p>
<p>2、serialVersionUId是一串long型数字，主要是用来辅助序列化和反序列化的，原则上序列化后的数据中的serialVersionUId只有和当前类的serialVersionUId相同才能够正常地被反序列化。serialVersionUId的详细工作机制：序列化的时候系统会把当前类的serialVersionUId写入序列化的文件中，当反序列化的时候系统会去检测文件中的serialVersionUId，看它是否和当前类的serialVersionUId一致，如果一致就说明序列化的类的版本和当前类的版本是相同的，这个时候可以成功反序列化；否则说明版本不一致无法正常反序列化。一般来说，我们应该手动指定serialVersionUId的值：<br>    1.静态成员变量属于类不属于对象，所以不参与序列化过程；<br>    2.声明为transient的成员变量不参与序列化过程。<br>    3.Parcelable接口内部包装了可序列化的数据，可以在Binder中自由传输，Parcelable主要用在内存序列化上，可以直接序列化的有Intent、Bundle、Bitmap以及List和Map等等</p>
<h3 id="实现IPC的方式"><a href="#实现IPC的方式" class="headerlink" title="实现IPC的方式"></a>实现IPC的方式</h3><p>1、 Bundle：Bundle实现了Parcelable接口，Activity、Service和Receiver都支持在Intent中传递Bundle数据。</p>
<p>2、 Messenger：Messenger是一种轻量级的IPC方案，其底层是用AIDL实现的。Messenger是以串行的方式处理请求的，服务端只能一个个处理，不能并发执行。</p>
<p>3、 AIDL：第一步创建一个Service和一个AIDL接口，第二步创建一个类继承自AIDL接口中的Stub类并实现Stub类中的抽象方法，然后在Service的onBind方法中返回这个类的对象，再在客户端绑定服务端Service，建立连接后就可以访问远程服务端的方法。</p>
<pre><code>1.AIDL支持的数据类型：基本数据类型、String和CharSequence、ArrayList、HashMap、Parcelable以及AIDL；
2.某些类即使和AIDL文件在同一个包中也要显式import进来；
3.AIDL中除了基本数据类，其他类型的参数都要标上方向：in、out或者inout；
4.AIDL接口中支持方法，不支持声明静态变量；
5.为了方便AIDL的开发，建议把所有和AIDL相关的类和文件全部放入同一个包中，这样做的好处是，当客户端是另一个应用的时候，可以直接把整个包复制到客户端工程中。
6.RemoteCallbackList是系统提供来删除跨进程Listener的接口。是一个泛型，可以管理任何的ALDL接口。
</code></pre><p> 4、ContentProvider：</p>
<pre><code>1.ContentProvider主要以表格的形式来组织数据，并且可以包含多个表；
2.ContentProvider还支持文件数据，比如图片、视频等，系统提供的MediaStore就是文件类型的ContentProvider；
3.ContentProvider对底层的数据存储方式没有任何要求，可以是SQLite、文件，甚至是内存中的一个对象都行；
4.要观察ContentProvider中的数据变化情况，可以通过ContentResolver的registerContentObserver方法来注册观察者；
</code></pre><p> 5、Socket：Socket是网络通信中“套接字”的概念，分为流式套接字和用户数据包套接字两种，分别对应网络的传输控制层的TCP和UDP协议。 </p>
<p> 6、文件共享：这种方式简单，适合在对数据同步要求不高的进程之间进行通信，并且要妥善处理并发读写的问题。</p>
<h3 id="Binder连接池"><a href="#Binder连接池" class="headerlink" title="Binder连接池"></a>Binder连接池</h3><p>如果项目规模较大，创建过多的Service是不合理的，因为service是系统资源，过多的service会使得应用看起来很重，所以最好的做法是将所有的AIDL放在同一个Service中去管理。其工作机制是：每一个业务模块创建自己的AIDL接口并实现此接口，此时不同业务模块之间不能有耦合，所有实现细节我们要单独开来，然后向服务端提供自己的唯一标识和其对应的Binder对象；对于服务端来说，只需要一个Service，服务端提供一个queryBinder接口，这个接口能够根据业务模块的特征来返回相应的Binder对象给它们，不同的业务模块拿到所需的Binder对象后就可以进行远程方法调用了。<br>Binder连接池的主要作用就是将每个业务模块的Binder请求统一转发到远程Service去执行，从而避免了重复创建Service的过程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Android IPC机制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在任何一个操作系统中都需要IPC机制的存在，例如：Linux中通过共享内存、命名通道等来实现进程间的通信。然而在Android系统中是什么来实现呢？答案是Binder。当然，不仅使用了Binder机
    
    </summary>
    
    
      <category term="Android" scheme="http://joytan1209.github.io/tags/Android/"/>
    
      <category term="移动开发" scheme="http://joytan1209.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
